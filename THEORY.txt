When u create New Project with Spring Boot - three folders automatically are created:
1) src/main/java - it supposed to be used to save all java source files
2) src/main/resources - it supposed to be used for TEMPLETES and any other files
3) src/main/test - is used for tests

1_TASK:
We are creating a Registration Page with fields : Name, Surname, email, Age, Weight, Height.

First - a few dependencies need to be added:
-> Thymeleaf - a powerful template processing engine for the Spring framework.
-> Spring Boot Devtools - используетс€ дл€ быстрого перезапуска приложени€ в гор€чей JVM при обнаружении изменений
в скомпилированном коде или шаблонах; более того освобождает от очистки cache у Thymeleaf, 
если выбранный движок включен в проект.
-> Spring Data JPA - makes it easy to implement JPA based repositories and build Spring-powered 
applications that use data access technologies.
-> H2 - it's a Java SQL database. It's a lightweight database that can be run in-memory.

@Entity annotation tells our JPA provider Hibernate, that this class should be mapped to the database

Thymeleaf is a powerful TEMPLATE engine that can be used with the Spring framework. 
It lets you write plain HTML code while also using Java objects for data binding.

Currently all our controller methods feature the @ResponseBody annotation.
With this annotation in place the String returned by our controller methods gets sent to the browser as plain text.
If we remove it, the Thymeleaf library will look for an HTML Template with the name returned.

Now we want to pass some data to the template.
This is done by adding an object and optionally a name to the Model object passed in by the Spring framework.
Use the addAttribute() method to achieve this.
The first parameter is the name (key value), the second parameter is an object.
You will use this name(key value) to refer to this object in the template.
For the initial form route pass an empty object of the data class you created in the previous exercise.
Adding model.addAttribute("issuereport", new IssueReport()); to the method getReport().
Repeating the same for the method submitReport().

In the submitReport() method we also want to handle the data submitted via the form.
To do this we also need to add IssueReport issueReport to the method parameters.

Since we want the template to show some kind of feedback upon receiving the form data,
we should also add another attribute containing a boolean.
If itТs set to true the template will show some kind of modal or confirming message.

Just add another attribute with the name submitted and the value true.


To use the objects passed in, we need to use specific Thymeleaf HTML syntax in the templates.
All properties and attributes in an HTML file that are being used by Thymeleaf and are not standard HTML.
They will begin with the prefix th:
